//без адаптера
Dough unknown = new Dough("Puff");
unknown.LoadData("Puff");

Console.WriteLine();

//с адаптером
DoughDetails puff = new("Puff");
puff.LoadData("Puff");

Console.WriteLine();

DoughDetails shortbread = new("Shortbread");
shortbread.LoadData("Shortbread");

Console.ReadKey();




interface ILoadData
{
    void LoadData(string doughName);
}

public enum TemperatureType
{
    Fahrenheit,
    Celsius
}

class DoughDatabase
{
    public int GetRightCookTemp(string dough, TemperatureType tempType)
    {
        if (tempType == TemperatureType.Celsius)
        {
            switch (dough.ToLower())
            {
                case "puff":           //слоёное
                    return 230;
                case "biscuit":        //бисквитное
                    return 210;
                case "shortbread":     //песочное
                    return 240;
                case "choux":          //заварное
                    return 190;
                case "gingerbread":    //пряничное
                    return 200;
                case "nut":            //ореховое
                    return 160;

                default:
                    return 0;
            }
        }
        else
        {
            switch (dough.ToLower())
            {
                case "puff":
                    return 446;
                case "biscuit":
                    return 410;
                case "shortbread":
                    return 464;
                case "choux":
                    return 374;
                case "gingerbread":
                    return 392;
                case "nut":
                    return 320;

                default:
                    return 0;
            }
        }
    }

    public int GetTime(string dough)
    {
        switch (dough.ToLower())
        {
            case "puff":
                return 25;
            case "biscuit":
                return 50;
            case "shortbread":
                return 15;
            case "choux":
                return 30;
            case "gingerbread":
                return 35;
            case "nut":
                return 20;

            default: return 0;
        }
    }

    public string GetPastry(string dough)
    {
        switch (dough.ToLower())
        {
            case "puff":
                return "Puffs, croissants, strudel";
            case "biscuit":
                return "Biscuit, sponge cake, roll";
            case "shortbread":
                return "Cookies, pie crust";
            case "choux":
                return "Eclair, profiteroles, churros";
            case "gingerbread":
                return "Parliament cake, gingerbread";
            case "nut":
                return "Fruit tarts, galettes.";

            default: return "";
        }
    }
}

class Dough : ILoadData
{
    private string DoughName;
    

    public Dough(string dough)
    {
        this.DoughName = dough;
    }

    public void LoadData(string doughName)
    {
        Console.WriteLine($"Dough: {DoughName}");
    }
}

class DoughDetails : ILoadData
{
    private DoughDatabase _doughDatabase;
    private int RightTempFahrenheit;
    private int RightTempCelsius;
    private int Time;
    private string RecommendedPastry;

    public DoughDetails(string name)
    {
    }

    public void LoadData(string doughName)
    {
        _doughDatabase = new DoughDatabase();

        RightTempFahrenheit = _doughDatabase.GetRightCookTemp(doughName, TemperatureType.Fahrenheit);
        RightTempCelsius = _doughDatabase.GetRightCookTemp(doughName, TemperatureType.Celsius);
        Time = _doughDatabase.GetTime(doughName);
        RecommendedPastry = _doughDatabase.GetPastry(doughName);

        Console.WriteLine($"Dough: {doughName}");
        Console.WriteLine($" Baking temperature (F): {RightTempFahrenheit}");
        Console.WriteLine($" Baking temperature (C): {RightTempCelsius}");
        Console.WriteLine($" Recommended time: {Time} min");
        Console.WriteLine($" Recommended pastry: {RecommendedPastry}");
    }
}
